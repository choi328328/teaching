# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from feedernet_constant import hospital_constant
import datetime
import time
from selenium.webdriver.chrome.options import Options


def try_find(driver, by, name):
    try:
        driver.find_element(by, name)
        return True
    except Exception:
        return False


class Feedernet():
    def __init__(self, executable_path='./chromedriver_102'):
        chrome_options = Options()
        chrome_options.add_experimental_option("detach", True)
        self.driver = webdriver.Chrome(
            executable_path=executable_path, chrome_options=chrome_options)

        self.driver.implicitly_wait(time_to_wait=15)
        self.url = "https://feedernet.com/member/main"
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def login(self, id='choi328328@ajou.ac.kr', pw='qwer1234!@', ):
        self.driver.get(self.url)
        self.driver.set_window_size(1600, 900)
        self.driver.find_element(By.CSS_SELECTOR, ".login span").click()

        self.driver.find_element(
            By.CSS_SELECTOR, ".form-group:nth-child(2) .form-control").clear()
        self.driver.find_element(
            By.CSS_SELECTOR, ".form-group:nth-child(1) > .form-group > .form-control").send_keys(id)
        self.driver.find_element(
            By.CSS_SELECTOR, ".form-group:nth-child(2) .form-control").clear()
        self.driver.find_element(
            By.CSS_SELECTOR, ".form-group:nth-child(2) .form-control").send_keys(pw)

        self.driver.find_element(
            By.CSS_SELECTOR, ".form-group:nth-child(2) .form-control").send_keys(Keys.ENTER)
        self.driver.find_element(
            By.CSS_SELECTOR, "ul:nth-child(2) > li:nth-child(2) .titleNavMenu").click()
        print('login success')

    def new_tab(self, tabname):
        self.driver.execute_script(f"window.open('about:blank','{tabname}');")
        self.driver.switch_to.window(tabname)

    def accept_licence(self):
        time.sleep(1)

        if [i for i in self.driver.find_elements(by=By.CLASS_NAME, value="btn-success") if i.text == 'Accept'] != []:
            [i for i in self.driver.find_elements(
                by=By.CLASS_NAME, value="btn-success") if i.text == 'Accept'][0].click()

    def search_concept(self, domain='Condition Occurrence', filter=1, target=None):
        '''
        target의 domain 찾아서 11개 tab으로 반환 쉽네 ㅎ
        '''
        newest_for_hospital = hospital_constant.newest_vocabulary[target]
        location_url = hospital_constant.location_urls[target]
        self.driver.get(
            f"https://api.feedernet.co.kr/atlas/{location_url}/0/#/home")
        time.sleep(3)
        try:
            self.driver.find_element(
                By.CSS_SELECTOR, ".app__menu-item:nth-child(2) > .app__menu-title").click()
        except Exception:
            time.sleep(3)
            self.accept_licence()
            self.driver.find_element(
                By.CSS_SELECTOR, ".app__menu-item:nth-child(2) > .app__menu-title").click()

        self.accept_licence()
        self.driver.find_element(
            By.CSS_SELECTOR, ".app__menu-item:nth-child(2) > .app__menu-title").click()

        dropdown = self.driver.find_element(
            By.CSS_SELECTOR, ".row:nth-child(1) .form-control")
        dropdown.find_element(
            By.XPATH, f"//option[. = '{newest_for_hospital}']").click()

        dropdown = self.driver.find_element(
            By.CSS_SELECTOR, ".row:nth-child(2) .form-control")
        dropdown.find_element(
            By.XPATH, f"//option[. = '{domain}']").click()

        self.driver.find_element(By.LINK_TEXT, "Table").click()
        self.driver.find_element(By.CSS_SELECTOR, "input").clear()
        self.driver.find_element(
            By.CSS_SELECTOR, "input").send_keys(str(filter))

    def cohort_generation(self, cohort_definition, target=None, cohort_name=None):
        print(f'Cohort generation for {target}')
        newest_for_hospital = hospital_constant.newest_generate[target]
        location_url = hospital_constant.location_urls[target]
        cohort_name = f'counts_{datetime.datetime.now()}'[
            :26] if cohort_name is None else cohort_name
        self.driver.get(
            f"https://api.feedernet.co.kr/atlas/{location_url}/0/#/home")
        time.sleep(2)

        try:
            self.driver.find_element(
                By.LINK_TEXT, "Cohort Definitions").click()
        except Exception:
            time.sleep(3)
            self.accept_licence()
            self.driver.find_element(
                By.LINK_TEXT, "Cohort Definitions").click()

        try:
            self.driver.find_element(By.CSS_SELECTOR, ".btn").click()
        except Exception:
            time.sleep(3)
            self.accept_licence()
            self.driver.find_element(By.CSS_SELECTOR, ".btn").click()

        self.driver.find_element(
            By.CSS_SELECTOR, ".input-group > .form-control").clear()  # cohort_name name
        self.driver.find_element(
            By.CSS_SELECTOR, ".input-group > .form-control").send_keys(cohort_name)  # cohort_name
        self.driver.find_element(By.LINK_TEXT, "Export").click()
        self.driver.find_element(By.LINK_TEXT, "JSON").click()
        self.driver.find_element(
            By.ID, "cohortExpressionJSON").clear()  # json text box
        self.driver.find_element(By.ID, "cohortExpressionJSON").send_keys(
            json.dumps(cohort_definition))
        while self.driver.find_element(By.ID, "cohortExpressionJSON").get_attribute("value") == '':
            time.sleep(1)
        self.driver.find_element(
            By.CSS_SELECTOR, ".col-md-6:nth-child(2) > .btn").click()  # reload
        time.sleep(1)
        self.driver.find_element(By.LINK_TEXT, "Definition").click()

        try_count = 0
        while try_count < 5:
            try:
                time.sleep(3)
                self.driver.find_element(
                    By.CSS_SELECTOR, ".input-group-btn:nth-child(2) > .btn-success").click()
                time.sleep(3)
                self.driver.find_element(By.LINK_TEXT, "Generation").click()
                time.sleep(3)
                self.driver.find_element(
                    By.CSS_SELECTOR, f"tr:nth-child({newest_for_hospital}) span .btn").click()  # save
                time.sleep(2)
                break
            except Exception:
                try_count += 1
